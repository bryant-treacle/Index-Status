# Author Bryant Treacle
# Date 2 May 18
# Filter for input 0050_index_status.conf


filter {
    if "index_memory" in [tags] {
        csv {
            separator => ","
                columns => [
                "index",
                "index_memory"
                ]
            }
        }
}
# This filter will convert strings with the suffix (kb,mb,gb) into its numerical value in Bytes and convert field to a float 
filter {
    if "index_memory" in [tags] {
# split the "index_memory" into number, units prefix, and units base
    grok {
        match => { "index_memory" => "%{BASE10NUM:store_number:float}(?<store_units_prefix>[kmg])(?<store_units_base>[b])$" }
    }
    mutate {
	add_field => {
            "store_units_prefix" => "%{store_units_prefix}"
            "store_units_base" => "%{store_units_base}"
        }
    }
# Multiply the Base unit by the prefix decimal number
    if "k" in [store_units_prefix] {
        ruby {
            code => ' event.set("index_memory_size", event.get("store_number").to_f * 1024) '
        }
    }
   else if "m" in [store_units_prefix] {
        ruby {
            code => ' event.set("index_memory_size", event.get("store_number").to_f * 1048576) '
            }
	}
    else if "g" in [store_units_prefix] {
        ruby {
            code => ' event.set("index_memory_size", event.get("store_number").to_f * 1073741824) '
            }
	}
# Remove un-needed fields
    mutate {
	remove_field => [ "index_memory", "store_number", "store_units_base", "store_units_prefix" ]
        }
   }
}
filter {
    if "index_status" in [tags] {
	csv {
	    separator => ","
		columns => [
		"health",
		"status",
		"index",
		"uuid",
		"primary_shards",
		"replica_shards",
		"docs_count",
		"docs_deleted",
		"store_size_old"
		]
	    }
    }	
}
# This filter will convert strings with the suffix (kb,mb,gb) into its numerical value in Bytes and conv$
filter {
    if "index_status" in [tags] {
# split the "store.size" into number, units prefix, and units base
    grok {
        match => { "store_size_old" => "%{BASE10NUM:store_number:float}(?<store_units_prefix>[kmg])(?<store_units_base>[b])$" }
    }
    mutate {
        add_field => {
            "store_units_prefix" => "%{store_units_prefix}"
            "store_units_base" => "%{store_units_base}"
        }
    }
# Multiply the Base unit by the prefix decimal number
    if "k" in [store_units_prefix] {
        ruby {
            code => ' event.set("store_size", event.get("store_number").to_f * 1024) '
        }
    }
   else if "m" in [store_units_prefix] {
        ruby {
            code => ' event.set("store_size", event.get("store_number").to_f * 1048576) '
            }
        }
    else if "g" in [store_units_prefix] {
        ruby {
            code => ' event.set("store_size", event.get("store_number").to_f * 1073741824) '
            }
        }
	ruby {
	    code => "event.set('store_size_per_shard', event.get('store_size').to_i / event.get('primary_shards').to_i)" 
	}
# Remove un-needed fields
    mutate {
        remove_field => [ "store_size_old", "store_number", "store_units_base", "store_units_prefix" ]
        }
   }
}

filter {
    if "elasticsearch_status" in [tags] {
        csv {
            separator => ","
                columns => [
                "heap_percent",
		"ram_percent"
                ]
            }
        }
}
filter {
    if "logstash_status" in [tags] {
        csv {
            separator => ","
                columns => [
                "logstash_heap"
                ]
            }
        }
}
filter {
    if "logstash_pipeline_status" in [tags] {
        csv {
            separator => ","
                columns => [
                "queue_push_duration_in_millis",
                "duration_in_millis",
		"out",
		"filtered",
		"in"
                ]
            }
        ruby {
	    code => "event.set('dropped_events', event.get('in').to_i - event.get('out').to_i)"
    	     }
       }
}
